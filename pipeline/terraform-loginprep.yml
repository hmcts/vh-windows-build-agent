parameters:
  workingDirectory: $(system.defaultWorkingDirectory)
  storageAccount: ""
  armServiceConnection: ""
  pat_token: ""
  agent_pool: ""
  environment: ""

steps:
  - task: AzureCLI@2
    inputs:
      azureSubscription: ${{ parameters.armServiceConnection }}
      scriptType: pscore
      scriptLocation: inlineScript
      AddSpnToEnvironment: true
      workingDirectory: ${{ parameters.workingDirectory }}
      inlineScript: |
        echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$env:servicePrincipalId"
        echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$env:servicePrincipalKey"
        az account set -s ${{ parameters.armServiceConnection }}
        echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(az account show --query 'id' --output tsv)"
        echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(az account show --query 'tenantId' --output tsv)"
        echo "##vso[task.setvariable variable=ARM_ACCESS_KEY]$(az storage account keys list -n ${{ parameters.storageAccount }} --query [0].value --output tsv)"
    displayName: Terraform Prepare Login
    condition: succeeded()

  - pwsh: |
      @{
        azdevops_url = "$(System.TeamFoundationCollectionUri)"
        azdevops_pat = $env:pat_token
        azdevops_agentpool = $env:agent_pool
      } | ConvertTo-Json | Set-Content params.auto.tfvars.json -force
    workingDirectory: ${{ parameters.workingDirectory }}
    displayName: "Create Param File"
    condition: succeeded()
    env:
      pat_token: ${{ parameters.pat_token }}
      agent_pool: ${{ parameters.agent_pool }}
  
  - task: AzureCLI@2
    inputs:
      azureSubscription: ${{ parameters.armServiceConnection }}
      scriptType: pscore
      scriptLocation: inlineScript
      failOnStandardError: false
      inlineScript: |
        $tfFolder = Join-Path "${{ parameters.workingDirectory }}" ".terraform"
        if(test-path $tfFolder) {
          Remove-Item $tfFolder -Force -Recurse
        }

        $tfPlan = Join-Path "${{ parameters.workingDirectory }}" "plan.tfplan"
        if(test-path $tfPlan) {
          Remove-Item $tfPlan -Force
        }

        terraform init -backend-config="storage_account_name=${{ parameters.storageAccount }}" -reconfigure
        
        if($null -eq (terraform workspace list | Select-String '${{ parameters.environment }}$')) {
          terraform workspace new ${{ parameters.environment }}
        } else {
          terraform workspace select ${{ parameters.environment }}
        }
      workingDirectory: ${{ parameters.workingDirectory }}
    displayName: Terraform Backend Initialisation
    condition: succeeded()
